Lecture 5b: Cloud Security

**Cryptography**
Broadly, there are two mechanisms used in cryptography:
1. **Symmetric Key Cryptography:** the same key is used for encryption and decryption.
2. **Asymmetric Key Cryptography:** two different keys are used.

**Symmetric Key Cryptography**
The communication channel is insecure. How can we settle on the key to be used for cryptography over this insecure channel?

---

**Diffie-Hellman key exchange algorithm (1976)**
p, g: prime numbers. a, b: random numbers
**Alice**
Secret | Public | Calculates | Sends | Calculates
a
p, g
p.g
a
p, g, A | ga mod p = A | A→
a
p, g, A
a, sp, g, A, B | Bª mod p = s | Bgb mod p = B | p, g, A, B | Ab mod p = s | p, g, A, B b, s
**Bob**
Public | Secret
b
p, g
b
b
Alice computes s=g^ba mod p. Bob computes s=g^ab mod p.
Example: Alice and Bob agree to use p=23 and g=5 (publicly). Alice secretly uses a=6, and Bob secretly chooses b=15.
Alice sends to Bob A = g^a mod p = 5^6 mod 23 = 8
Bob sends to Alice B = g^b mod p = 5^15 mod 23 = 19
Alice computes s = B^a mod p = 19^6 mod 23 = 2
Bob computes s = A^b mod p = 8^15 mod 23 = 2

---

**DES**
> Data Encryption Algorithm. Been used for over two decades. DES is a block cipher. It encrypts data in blocks of 64 bits. The key is 56 bits.
Plaintext | Initial permutation | LPT and RPT
16 rounds with key | Final permutation | Ciphertext

---

**Asymmetric Key Cryptography**
Also called Public Key Cryptography. A pair of keys are used:
- Public key: used for encryption
- Private key: used for decryption. Only known to the owner. Only the corresponding private key can decrypt

**RSA**
The most popular and proven asymmetric key cryptography algorithm, by Rivest, Shamir, and Adleman of MIT, 1977. It relies on a mathematical fact that it's easy to find and multiply two large prime numbers, but it's extremely difficult to factor their product back into two primes.

**RSA - Key generation**
1. Choose two large prime numbers P and Q. P=7, Q=17
2. Calculate N=P*Q. N=119
3. Select the public key E such that it is not a factor of (P-1)(Q-1). (P-1)(Q-1)=6*16. Let's choose E=5
4. Select the private key D such that the following is true: (D*E) mod (P-1)(Q-1) = 1. Let's choose D=77, because 77*5 mod 96 = 1

**RSA - En/decryption**
Suppose the keys are generated by Bob. Bob gives Alice its public key E and the number N.
Alice wants to send a character "F" to Bob. She'll use Bob's public key to encrypt it.
CT = PTE mod N = PTE mod P*Q
Alice sends 65 mod 119 = 41
Bob uses the following: PT = CTD mod N
Bob gets 4177 mod 119 = 6
- For an attacker to crack the message, he needs to find the values of P and Q using N. This is extremely difficult for large primes.
- Takes more than 70 years if N is 100 digits.
- If Alice and Bob use RSA, it'll be difficult to crack their communication.
- "Factoring as a Service" (https://eprint.iacr.org/2015/1000.pdf), published in 2015, used Amazon EC2 cloud resources to factorize a 512-bit RSA modulus in just four hours for $75. What are the implications for network security?

---

**Digital Signatures**
When A sends to B, A uses B's public key to encrypt, so the message is confidential.
In many situations we need "signatures" to verify the identity of someone.
We can use a different scheme:
- A uses his private key to encrypt a message
- Anyone can check the message is signed by A by using A's public key
- Only A can sign the message
Certificates: bind Bob's ID to his PK.
How does Alice (browser) obtain Bob's public key pkBob?
In the diagram, there are three entities: Alice, Bob, and a Certification Authority (CA). Alice is the browser, Bob is the server, and the CA is a trusted third party that issues certificates.
The process of obtaining Bob's public key pkBob is as follows:
1. Bob generates a public-private key pair (pkBob, skBob).
2. Bob sends a certificate request to the CA. The certificate request contains Bob's public key pkBob and proof that Bob owns the corresponding private key skBob.
3. The CA verifies the certificate request and issues a certificate. The certificate contains Bob's public key pkBob and the CA's signature.
4. Bob sends the certificate to Alice.
5. Alice verifies the certificate and extracts Bob's public key pkBob.
Bob uses his certificate for an extended period (e.g., one year). During this period, Alice can use Bob's public key pkBob to encrypt messages to Bob. Bob can use his private key skBob to decrypt the messages.

**Public Key Infrastructure - PKI**
How do we know a key belongs to Bob?
One solution: PKI.
Trust certification/root authority (VeriSign, etc.). Everyone must know the public key of the root authority. Check your browser, you can find many. Root authority can sign certificates. Certificates identify others, including other authorities. DocuSign is a SaaS product that businesses use to send electronic signatures. [DocuSign Wikipedia](https://en.wikipedia.org/wiki/DocuSign)
