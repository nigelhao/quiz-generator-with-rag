Lecture 7: Pagerank Algorithm

Exercise on PageRank
Consider a Web graph with three nodes 1, 2, and 3. The links are as follows:
1->2, 3->2, 2->1, 2->3. Write down the transition probability matrices P for
the surfer's walk with teleporting, with the value of teleport probability
α=0.5.

The transition probability matrix P is given by:
```
A =
0   1   0
1   0   1
0   1   0
```

Each entry in the matrix is divided by the number of ones in that row.
```
(1- α)*
1/2 0 1/2
0 1 0
0 1 0
```

The teleport probability matrix is given by:
```
α*
1/3 1/3 1/3
1/3 1/3 1/3
1/3 1/3 1/3
```

The overall transition probability matrix is given by:
```
P = A + α*
5/12 1/6 5/12
1/3 1/3 1/3
1/6 2/3 1/6
```

---

PageRank example
The PageRank of a web page is a measure of its importance or popularity. It is calculated by taking into account the number and quality of links to the page. The PageRank of a page is determined by the following formula:
PR(a) = (1-d) + d * (PR(b)/C(b) + PR(c)/C(c) + PR(d)/C(d))
where:
PR(a) is the PageRank of page a
d is a damping factor that is typically set to 0.85
C(b) is the number of outgoing links from page b
PR(b) is the PageRank of page b
The PageRank of a page is a measure of its importance or popularity. It is calculated by taking into account the number and quality of links to the page. The PageRank of a page is determined by the following formula:
PR(a) = (1-d) + d * (PR(b)/C(b) + PR(c)/C(c) + PR(d)/C(d))
where:
PR(a) is the PageRank of page a
d is a damping factor that is typically set to 0.85
C(b) is the number of outgoing links from page b
PR(b) is the PageRank of page b
The PageRank of a page is a measure of its importance or popularity. It is calculated by taking into account the number and quality of links to the page. The PageRank of a page is determined by the following formula:
PR(a) = (1-d) + d * (PR(b)/C(b) + PR(c)/C(c) + PR(d)/C(d))
where:
PR(a) is the PageRank of page a
d is a damping factor that is typically set to 0.85
C(b) is the number of outgoing links from page b
PR(b) is the PageRank of page b
The PageRank of a page is a measure of its importance or popularity. It is calculated by taking into account the number and quality of links to the page. The PageRank of a page is determined by the following formula:
PR(a) = (1-d) + d * (PR(b)/C(b) + PR(c)/C(c) + PR(d)/C(d))
where:
PR(a) is the PageRank of page a
d is a damping factor that is typically set to 0.85
C(b) is the number of outgoing links from page b
PR(b) is the PageRank of page b

---

# Random Walkers
- For large graphs, solving linear systems of equations is intractable.
- Random surfers: Where do you end if you follow links at random?
-
a
c
b
Start at node a: after one step, end
up in b, c, or d with probability 1/3.
d
- Transition matrix: Mij = 1 if j → i ∈ E and 0 otherwise.
dj
- The transition matrix is column-stochastic: columns sum to 1.

Random Walkers: Transition Matrix Example
A random walker is a mathematical model of a particle that moves randomly. It is often used to simulate the motion of particles in a fluid or gas.
In this example, we will consider a random walker that moves on a graph. The graph has four nodes, labeled a, b, c, and d. The edges between the nodes are labeled with probabilities. For example, the edge between a and b is labeled with the probability 1/2. This means that if the random walker is at node a, it will move to node b with probability 1/2.
The transition matrix for this random walker is a 4x4 matrix. The element in the ith row and jth column of the transition matrix is the probability that the random walker will move from node i to node j.
For example, the element in the first row and second column of the transition matrix is 1/2. This is because the probability that the random walker will move from node a to node b is 1/2.

The transition matrix for this random walker is:
```
0 1/2 1 0
1/3 0 0 1/2
1/3 0 0 1/2
1/3 1/2 0 0
```

---

## PageRank with random walkers
- Start random surfers at all pages with equal probability
$$V_0 = [1/n, 1/n, . . ., 1/n]$$
- After one step, the distribution will be
$$V_1 = MV_0$$
- After k steps:
$$V_k = M^kV_0$$
- Markov process: The distribution approaches a limiting distribution V such that V = MV if
 - The graph is strongly connected: can get from a node to any other node.
 - No dead ends: nodes that have no out-links.
v = Mv.
- Surfers are stationary.
- The more important a page, and the more likely it is to have a surfer.
- v is... the principal eigenvector of M. (M stochastic has largest eigenvalue 1.)
- Power iteration: compute v by iterative matrix-vector multiplications.
- Stop when ||v^t - v^(t-1)|| <= epsilon.
- How eigenvectors are computed in large dimensions (e.g. Lanczos method.)
- Amenable to MapReduce parallelization.
- Equivalent to previous PageRank formulation:
v_i = \Sigma d_ij / d_j
Example
a ⟶ b
c ⟶ d

Transition matrix:
[0 1/2 1 0]
[1/3 0 0 1/2]
[1/3 1/2 0 0]
[0 0 1 0]
- Initialization: V0 = [1/4, 1/4, 1/4, 1/4].
- After one step: V1 = [9/24, 5/24, 5/24, 5/24].
- After two steps: V2 = [15/48, 11/48, 11/48, 11/48].
- ...
- Converges to: V = [1/3, 2/9, 2/9, 2/9].

---

Dead ends
- Dead ends: nodes that have no out-links.
a -> b
    \
     c -> d
c is a dead end

Transition matrix:
[0 1/2 0 0]
[1/3 0 0 1/2]
[1/3 0 0 1/2]
[1/3 1/2 0 0]

- The transition matrix does not have full rank.
- It cannot be inverted, i.e. our linear system of equations has no solution.
- The power method converges to v = 0.

Solutions:
- Recursively remove dead ends and their incoming links.
- When at a dead end, teleport (with equal probability) to another node.
 Example

The diagram shows a transition matrix for a Markov chain with four states, a, b, c, and d. The transition probabilities are as follows:
a -> a: 0
a -> b: 1/2
a -> c: 0
a -> d: 0

b -> a: 1/3
b -> b: 0
b -> c: 0
b -> d: 1/2

c -> a: 1/3
c -> b: 0
c -> c: 0
c -> d: 1/2

d -> a: 1/3
d -> b: 1/2
d -> c: 0
d -> d: 0

The new transition matrix is as follows:
a -> a: 0
a -> b: 1/2
a -> c: 1/4
a -> d: 0

b -> a: 1/3
b -> b: 0
b -> c: 1/4
b -> d: 1/2

c -> a: 1/3
c -> b: 0
c -> c: 1/4
c -> d: 1/2

d -> a: 1/3
d -> b: 1/2
d -> c: 1/4
d -> d: 0

Eventually, the stationary distribution of the Markov chain is v = [1/5, 4/15, 4/15, 4/15].

---

Spider traps
- Spider trap: set of nodes with no dead ends but no links out.
- Problem:
All random surfers end up in the spider trap.
- Transition matrix:
[0 1/2 0 0]
[1/3 0 0 1/2]
[1/3 0 1 1/2]
[1/3 1/2 0 0]
- v converges to v = [0, 0, 1, 0] .

# Taxation
- How to get out of spider traps?
- A random surfer can leave the graph at any moment.
- New surfers can be started at any page at any moment.
- Taxation: Allow each random surfer a probability 1 - β of teleporting to a random page
     - v = βMv + (1 - β)1.
     - Typically, β ∈ [0.8 – 0.9].
Example

a -> b
c <-> d

Transition matrix:
[0 1/2 0 0]
[1/3 0 0 1/2]
[1/3 0 1 1/2]
[1/3 1/2 0 0]

v = βMv + (1 - β) 1
n

β = 0.8 = 4/5

v = [4/15 0 2/5 0] + (1/20) [1 1 1 1]
v = [15 148 95 19] / 148
Solution: v = [1/10, 148/148, 95/148, 19/148]

---

Summary
Large-scale data poses new technical problems for:
- storage → distributed file systems.
- computations → MapReduce programming model.
Split the data in chunks.
Map workers all execute the same operation on a chunk and return a key-val pair.
Reduce workers process all key-val pairs with the same key at once.

Algorithmic costs of MapReduce:
- Communication costs vs. computation costs.
- Reducer size and replication rate.
Extensions of MapReduce: Spark and TensorFlow.
MapReduce for machine learning.
Link analysis with PageRank.

PageRank Summary
- Robust and scalable algorithm with proven convergence guarantees
- Distributed algorithm in Google's data center-drive breakthroughs in compute (Google MapReduce) and storage (Google File System)
- Amenable to distributed computation via parallel computation (MapReduce in next Lecture)
- MapReduce Code walkthrough: http://web.archive.org/web/20221216071408/https://michaelnielsen.org/blog/using-mapreduce-to-compute-pagerank
