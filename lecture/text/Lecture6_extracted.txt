 Nanyang Technological University, Singapore

CE/CZ4052 Cloud Computing

CAP Theorem

Dr. Tan, Chee Wei
Email: cheewei.tan@ntu.edu.sg
Office: N4-02c-104
 Tradeoffs in Distributed System

* Let's just do best effort to make things consistent.
* Eventual consistency
    * Popularized by the CAP theorem.
    * The main problem is network partitions.

Client + front end 
withdraw(B, 4) 	T 	Network partition 	Client + front end
U
deposit(B,3);

B 	B
B

Replica managers
B

The diagram shows a distributed system with three nodes, A, B, and C. Each node has a replica of the data. The client can access any of the nodes to read or write data. 

In the example above, the client writes data to node A. Node A then replicates the data to nodes B and C. However, due to a network partition, node B is unable to replicate the data from node A. As a result, the data on node B is inconsistent with the data on nodes A and C.

Eventual consistency ensures that the data will eventually become consistent across all nodes in the system, but it does not guarantee that the data will be consistent at any given point in time.
 ## CAP Theorem
* Conjectured by Prof. Eric Brewer at PODC (Principle of Distributed Computing) 2000 keynote talk
* Described the trade-offs involved in distributed system
* It is impossible for a web service to provide following three guarantees at the same time:
    * Consistency
    * Availability
    * Partition-tolerance

The CAP theorem states that it is impossible for a distributed computer system to simultaneously provide all of the following three guarantees:

* Consistency: All nodes in the system have the same data at all times.
* Availability: Every request to the system is guaranteed to succeed.
* Partition tolerance: The system continues to operate correctly even if some of the nodes in the system fail.

In other words, a distributed system can only provide two out of the three guarantees. This is because there is a trade-off between consistency and availability. If a system is strongly consistent, then it may not be available all the time. Conversely, if a system is highly available, then it may not be strongly consistent.

The CAP theorem is a fundamental limitation of distributed systems. It is important to understand this theorem when designing distributed systems, as it can help you to make informed decisions about the trade-offs that you need to make.
 ## CAP Theorem
* Consistency:
 * All nodes should see the same data at the same time
* Availability:
 * Node failures do not prevent survivors from continuing to operate
* Partition-tolerance:
 * The system continues to operate despite network partitions
* A distributed system can satisfy any two of these guarantees at the same time but not all three
 ## CAP Theorem

The CAP theorem, also known as Brewer's theorem, is a fundamental theorem in computer science that states that it is impossible for a distributed computer system to simultaneously provide all of the following three guarantees:

* **Consistency:** All nodes in the system have the same data at all times.
* **Availability:** Every request to the system is guaranteed to succeed.
* **Partition tolerance:** The system continues to operate correctly even if some of the nodes in the system fail.

In other words, a distributed system can only provide two out of the three guarantees. This is because there is a trade-off between consistency and availability. If a system is strongly consistent, then it may not be available all the time. Conversely, if a system is highly available, then it may not be strongly consistent.

The CAP theorem has important implications for the design of distributed systems. For example, a system that requires strong consistency may need to sacrifice some availability. Conversely, a system that requires high availability may need to sacrifice some consistency.

The CAP theorem is a fundamental limitation of distributed systems. However, it is important to note that the CAP theorem does not mean that it is impossible to build reliable distributed systems. It simply means that there are trade-offs that need to be made when designing distributed systems.

## Diagram

The CAP theorem can be illustrated using a Venn diagram. The diagram shows that the three guarantees of the CAP theorem are located at the vertices of an equilateral triangle. The center of the triangle represents the point at which all three guarantees are met. However, as we move away from the center of the triangle, we start to lose one or more of the guarantees.

For example, if we move towards the Consistency vertex, we start to lose Availability. This is because a system that is strongly consistent may not be able to handle all requests. Conversely, if we move towards the Availability vertex, we start to lose Consistency. This is because a system that is highly available may not be able to guarantee that all nodes in the system have the same data at all times.

The CAP theorem is a fundamental limitation of distributed systems. However, it is important to note that the CAP theorem does not mean that it is impossible to build reliable distributed systems. It simply means that there are trade-offs that need to be made when designing distributed systems.
 CAP Theorem

A simple example:

Hotel Booking: are we double-booking the same room?

In the above diagram, there are two people, Bob and Dong. They are both trying to book the same hotel room. The hotel has a policy that does not allow double-booking. So, if Bob books the room first, then Dong will not be able to book the same room. Similarly, if Dong books the room first, then Bob will not be able to book the same room.

This is an example of the CAP theorem. The CAP theorem states that in a distributed system, you can only have two out of the following three properties:

* Consistency: All nodes in the system have the same data at all times.
* Availability: All nodes in the system are always available.
* Partition tolerance: The system can continue to operate even if some of the nodes in the system fail.

In this example, the hotel booking system can only have two out of the three properties. It can be consistent and available, but it cannot be partition tolerant. This is because if the system is partitioned, then the two nodes will not be able to communicate with each other. This means that they will not be able to share data, and they will not be able to book the same room.
 CAP Theorem
A simple example:
Hotel Booking: are we double-booking the same room?
Bob cannot see Dong's booking, and vice versa. If both try to book the same room at the same time, is it possible for the hotel booking system to double-book the room?
 CAP Theorem

A simple example:

Hotel Booking: are we double-booking the same room?

In the above diagram, we have a simple example of the CAP theorem. We have two clients, Bob and Dong, who are both trying to book the same hotel room. The hotel booking system is trying to ensure that only one of them can book the room.

The CAP theorem states that in a distributed system, you can only have two out of the following three properties:

* Consistency: All nodes in the system have the same data at all times.
* Availability: All nodes in the system are always available.
* Partition tolerance: The system can continue to operate even if some of the nodes fail.

In this example, the hotel booking system is trying to achieve consistency and partition tolerance. However, it cannot achieve availability because both Bob and Dong are able to book the same room.
 CAP Theorem: Proof

* 2002: Proven by research conducted by Nancy Lynch and Seth Gilbert at MIT

Gilbert, Seth, and Nancy Lynch. "Brewer's conjecture and the feasibility of consistent, available, partition-tolerant web services." ACM SIGACT News 33.2 (2002): 51-59.
 CAP Theorem: Proof

A simple proof using two nodes:

A B

The CAP theorem states that it is impossible for a distributed computer system to simultaneously provide all of the following three guarantees:

* Consistency: All nodes in the system have the same data at all times.
* Availability: Every request to the system is guaranteed to succeed.
* Partition tolerance: The system continues to operate correctly even if some of the nodes in the system fail.

In this proof, we will show that it is impossible to achieve all three of these guarantees in a system with two nodes.

We will first show that it is impossible to achieve both consistency and availability in a system with two nodes. To do this, we will consider the following scenario:

* Node A has a value of 1.
* Node B has a value of 2.
* A request is made to node A to read the value.
* Node A responds with the value 1.
* A request is made to node B to read the value.
* Node B responds with the value 2.

In this scenario, the system is not consistent because the two nodes have different values.

We will now show that it is impossible to achieve both availability and partition tolerance in a system with two nodes. To do this, we will consider the following scenario:

* Node A fails.
* A request is made to node B to read the value.
* Node B cannot respond to the request because it is not aware that node A has failed.

In this scenario, the system is not available because a request to the system cannot be guaranteed to succeed.

Finally, we will show that it is impossible to achieve all three of the CAP guarantees in a system with two nodes. To do this, we will consider the following scenario:

* Node A has a value of 1.
* Node B has a value of 2.
* A request is made to node A to read the value.
* Node A responds with the value 1.
* Node A fails.
* A request is made to node B to read the value.
* Node B cannot respond to the request because it is not aware that node A has failed.

In this scenario, the system is not consistent because the two nodes have different values, and it is not available because a request to the system cannot be guaranteed to succeed.

Therefore, it is impossible to achieve all three of the CAP guarantees in a system with two nodes.
 CAP Theorem: Proof

A simple proof using two nodes:

A simple proof of the CAP theorem can be given using two nodes. In this proof, we will show that if a system is partitioned, then it cannot be both consistent and available.

Consider a system with two nodes, A and B. Each node has a copy of the data. If the system is partitioned, then the two nodes will not be able to communicate with each other. This means that if a client writes data to node A, then node B will not be able to see the write. This would violate consistency, because the two nodes would have different views of the data.

We can also show that the system cannot be available if it is partitioned. This is because if a client tries to read data from node A, then the read will fail if node A is not available. This would violate availability, because the client would not be able to access the data.

Therefore, we have shown that a system cannot be both consistent and available if it is partitioned. This is the CAP theorem.
 CAP Theorem: Proof

A simple proof using two nodes:

A 
Wait to be updated

B
Not Available!

In the above diagram, we have two nodes, A and B. Node A is trying to update its value, but it is waiting for node B to be available. However, node B is not available, so node A cannot update its value. This is an example of the CAP theorem, which states that in a distributed system, you can only have two out of the three properties: Consistency, Availability, and Partition tolerance. In this case, we have consistency and partition tolerance, but not availability.
 CAP Theorem: Proof
* A simple proof using two nodes:

In the above diagram, we have two nodes, A and B. A is updated from B. If the network is partitioned, then A and B will not be able to communicate with each other. This means that A will not be able to get the updated value from B. Therefore, the CAP theorem states that a distributed system can only satisfy two out of the three properties of Consistency, Availability, and Partition tolerance.
 Why this is important?
- The future of cloud computing is distributed (Big Data Trend, etc.)
- CAP theorem describes the trade-offs involved in distributed systems
- A proper understanding of CAP theorem is essential to making decisions about the future of distributed system design
- Misunderstanding can lead to erroneous or inappropriate design choices
 Revisit CAP Theorem

* Of the following three guarantees potentially offered by distributed systems:
    * Consistency
    * Availability
    * Partition tolerance
* Pick two
* This suggests there are three kinds of distributed systems:
    * CP
    * AP
    * CA

Any problems?

The CAP theorem states that it is impossible for a distributed system to simultaneously provide all three of the following guarantees:

* Consistency: All nodes in the system have the same data at all times.
* Availability: All nodes in the system are always available.
* Partition tolerance: The system continues to operate correctly even if some of the nodes in the system fail.

In other words, a distributed system can only provide two of the three CAP guarantees.

The diagram shows the relationship between the three CAP guarantees. The X marks the point where all three guarantees are不可能同时满足. The three circles represent the three kinds of distributed systems that are possible:

* CP systems: These systems provide consistency and partition tolerance, but not availability.
* AP systems: These systems provide availability and partition tolerance, but not consistency.
* CA systems: These systems provide consistency and availability, but not partition tolerance.

In practice, most distributed systems are either CP or AP systems. CA systems are rare because they are difficult to design and implement.
 A popular misconception: 2 out 3
- How about CA?
- Can a distributed system (with unreliable network) really be not tolerant of partitions?

The diagram shows a Venn diagram with two circles. The left circle is labeled "C" and the right circle is labeled "A". The intersection of the two circles is labeled "CA".

The question is "Can a distributed system (with unreliable network) really be not tolerant of partitions?". The answer is "yes". 

A distributed system is a system that is composed of multiple computers that are connected by a network. A partition is a division of the network into two or more parts, such that the computers in one part cannot communicate with the computers in the other part.

A distributed system can be tolerant of partitions if it is designed in such a way that it can continue to operate even if one or more partitions occur. This can be done by using techniques such as replication, load balancing, and fault tolerance.

However, if a distributed system is not designed to be tolerant of partitions, then it may not be able to continue to operate if a partition occurs. This can lead to data loss, service outages, and other problems.
 A few witnesses
- Coda Hale, Yammer software engineer:
- “Of the CAP theorem's Consistency, Availability, and Partition Tolerance, Partition Tolerance is mandatory in distributed systems. You cannot not choose it."
http://codahale.com/you-cant-sacrifice-partition-tolerance/
 A few witnesses
Werner Vogels, Amazon CTO
- "An important observation is that in larger distributed-scale systems, network partitions are a given; therefore, consistency and availability cannot be achieved at the same time."
 A few witnesses
- Daniel Abadi, Co-founder of Hadapt
- So in reality, there are only two types of systems
...
I.e., if there is a partition, does the system give up availability or consistency?

http://dbmsmusings.blogspot.com/2010/04/problems-with-cap-and-yahoos-little.html
 Consistency or Availability

Consistency and Availability is not a "binary" decision

AP systems relax consistency in favor of availability – but are not inconsistent

CP systems sacrifice availability for consistency- but are not unavailable

This suggests both AP and CP systems can offer a degree of consistency, and availability, as well as partition tolerance

The diagram shows a Venn diagram with three circles. The circles are labeled "C" (for consistency), "A" (for availability), and "P" (for partition tolerance). The "X" marks the spot where all three circles overlap.

The diagram illustrates that there is a trade-off between consistency and availability. AP systems relax consistency in favor of availability, while CP systems sacrifice availability for consistency. However, both types of systems can offer a degree of partition tolerance.
 AP: Best Effort Consistency
* Example:
    * Web Caching
    * DNS
* Trait:
    * Optimistic
    * Expiration/Time-to-live
    * Conflict resolution
 CP: Best Effort Availability

* **Example:**
    * Majority protocols
    * Distributed Locking (Google Chubby Lock service)
* **Trait:**
    * Pessimistic locking
    * Make minority partition unavailable
 Types of Consistency
* Strong Consistency
After the update completes, any subsequent access will return the same updated value.
* Weak Consistency
It is not guaranteed that subsequent accesses will return the updated value.
* Eventual Consistency
Specific form of weak consistency
It is guaranteed that if no new updates are made to object, eventually all accesses will return the last updated value (e.g., propagate updates to replicas in a lazy fashion)
 ## Eventual Consistency
- A Facebook Example
* Bob finds an interesting story and shares with Alice by posting on her Facebook wall
* Bob asks Alice to check it out
* Alice logs in her account, checks her Facebook wall but finds:
 - Nothing is there!

![Image of a laptop with a Facebook wall that says "Nothing is there!"]
 ## Eventual Consistency - A Facebook Example
* Bob tells Alice to wait a bit and check out later
* Alice waits for a minute or so and checks back:
 - She finds the story Bob shared with her!

The diagram shows a Facebook wall, where Bob and Alice are users. Bob posts a story on his wall. Alice is notified of the story, but when she checks her wall, she does not see the story immediately. This is because of eventual consistency. Eventually, Alice will see the story on her wall, but it may take a few minutes for the data to be propagated across the system.
 ## Eventual Consistency
### A Facebook Example
* **Reason**: It is possible because Facebook uses an eventual consistent model
* **Why Facebook chooses eventual consistent model over the strong consistent one?**
    * Facebook has more than 1 billion active users
    * It is non-trivial to efficiently and reliably store the huge amount of data generated at any given time
    * Eventual consistent model offers the option to reduce the load and improve availability
 ## Eventual Consistency
### A Dropbox Example
* Dropbox enabled immediate consistency via synchronization in many cases.
* However, what happens in case of a network partition?

[Image of a laptop with a no-wifi symbol and a Dropbox icon]
 ## Eventual Consistency
### A Dropbox Example
* Let's do a simple experiment here:
    * Open a file in your dropbox
    * Disable your network connection (e.g., WiFi, 4G)
    * Try to edit the file in the dropbox: can you do that?
    * Re-enable your network connection: what happens to your dropbox folder?
 ## Eventual Consistency
### A Dropbox Example
- Dropbox embraces eventual consistency:
    - Immediate consistency is impossible in case of a network partition
    - Users will feel bad if their word documents freeze each time they hit Ctrl+S, simply due to the large latency to update all devices across WAN
    - Dropbox is oriented to personal syncing, not on collaboration, so it is not a real limitation.
 ## Eventual Consistency
### An ATM Example
- In design of automated teller machine (ATM):
- Strong consistency appear to be a nature choice
- However, in practice, A beats C
- Higher availability means higher revenue
- ATM will allow you to withdraw money even if the
machine is partitioned from the network
- However, it puts a limit on the amount of withdraw
(e.g., $200)
- The bank might also charge you a fee when a
overdraft happens

The diagram shows an ATM machine. The user is able to withdraw money from the ATM even if the machine is partitioned from the network. However, there is a limit on the amount of money that can be withdrawn. The bank might also charge a fee if the user overdrafts their account.
 Dynamic Tradeoff between C and A

- An airline reservation system:
 - When most of seats are available: it is ok to rely on somewhat out-of-date data, availability is more critical
 - When the plane is close to be filled: it needs more accurate data to ensure the plane is not overbooked, consistency is more critical
- Neither strong consistency nor guaranteed availability, but it may significantly increase the tolerance of network disruption
 Discussion
* In a cloud computing system (e.g., Amazon, Google cloud, etc), what are the trade-offs between consistency and availability you can think of? What is your strategy?
* Hint -> Things you might want to consider:
    * Different types of data (e.g., shopping cart, billing, product, etc.)
    * Different types of operations (e.g., query, purchase, etc.)
    * Different types of services (e.g., distributed lock, DNS, etc.)
    * Different groups of users (e.g., users in different geographic areas, etc.)
 Summary of CAP Theorem

* In the presence of a network partition:
* In order to keep the replicas consistent, you need to block.
    - From an outside observer, the system appears to be unavailable.
* If we still serve the requests from two partitions, then the replicas will diverge.
    - The system is available, but no consistency.
* The CAP theorem explains this dilemma.
