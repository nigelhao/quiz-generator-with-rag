Lecture 4: Cloud CPU Scheduling

Stride scheduler
Basic algorithm:
1. Stride scheduler picks job with the lowest pass value
2. Scheduler increments job's pass value by its stride and starts running the job for the current time slice
3. Stride scheduler increments a system counter
4. After scheduling quantum, scheduler returns to #1
Stride scheduler always runs job(s) with the lowest pass value(s)
KEY: Jobs having low “PASS” values are scheduled more often because their pass values increase more slowly than others...
- Stride values
- Tickets = priority to select job
- Stride is inverse to tickets
- Lower stride = more chances to run (higher priority)
Priority
C stride = 40
A stride = 100
B stride = 200
- Three-way tie: randomly pick job A (all pass values=0)
- Set A's pass value to A's stride = 100
- Increment sys counter by A's stride. counter > 100
- Pick a new job: two-way tie
Pass(A) (stride=100)      Pass(B) (stride=200)      Pass(C) (stride=40)   Who Runs?
0                               0                               0                       A
100                             0                               0                       B
100                             200                             0                       C
100                             200                             40                       C
100                             200                             80                       C
100                             200                             120                      A
200                             200                             120                      C
200                             200                             160                      C
200                             200                             200                      C
...

Initial job selection is random. All @ 0
C has the most tickets and receives a lot of opportunities to run...
- We set A's counter (pass value) to A's stride = 100
- Next scheduling decision between B (pass=0) and C (pass=0)
- Randomly choose B
- C has the lowest counter for next 3 rounds

| Pass(A) (stride=100) | Pass(B) (stride=200) | Pass(C) (stride=40) | Who Runs? |
|---|---|---|---|
| 0 | 0 | 0 | A |
| 100 | 0 | 0 | B |
| 100 | 200 | 0 | C |
| 100 | 200 | 40 | C |
| 100 | 200 | 80 | C |
| 100 | 200 | 120 | A |
| 200 | 200 | 120 | C |
| 200 | 200 | 160 | C |
| 200 | 200 | 200 | ... |

C has the most tickets and is selected to run more often.
- Job counters support determining which job to run next
- Over time jobs are scheduled to run based on their priority represented as their share of tickets...
- Tickets are analogous to job priority

                                 Tickets
                                   C = 250
                                   A = 100
                                   B = 50

Pass(A)   Pass(B)   Pass(C)   Who Runs?
(stride=100)  (stride=200)  (stride=40)
0               0               0
100             0               0           A
100             200             0           B
100             200             40          C
100             200             80          C
100             200             120         A
200             200             120         C
200             200             160         C
200             200             200         ...

Figure 3-12: Stride Scheduling Example. Clients A (triangles), B (circles), and C (squares) have a 3:2:1 ticket ratio. In this example, stride = 6, yielding respective strides of 2, 3, and 6. For each quantum, the client with the minimum pass value is selected, and its pass is advanced by its stride.
C. Waldspurger's PhD Thesis at MIT: http://www.waldspurger.org/carl/papers/phd-mit-tr667.pdf
